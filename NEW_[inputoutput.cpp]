 //  inputoutput.cpp
 //  socialNetwork
 //
 //  Created by Varun Mishra on 7/15/14.w
 //  Copyright (c) 2014 Varun Mishra. All rights reserved.
 //
 #include <iostream>
 #include <iomanip>
 #include <cstdlib>
 #include <fstream>
#include <sstream>
 #include "person.h"
 #include "BinarySearchTree.h"
 #include "BinarySearchTree.cpp"
 #include "hashing.h"
#include "LinkedList.h"
 
 using namespace std;
 
 class inputoutput {
 
 public:
 LinkedList<person> dataRecord;
 BinarySearchTree<person> tree;
 int count;
 inputoutput() {
 count = 0;
 }
     
 void readFile(string textname)  //dynamically allocate memory and storing each product line into the dynamic memory array
 {
 string  name;
 string password;
 string gender;
 string age;
 string city;
 string college;
 string wasteSpace;
 
 ifstream infile;
 infile.open(textname);
 while(!infile.eof())
 {
 getline(infile, name);
 getline(infile, password);
 getline(infile, gender);
 getline(infile, age);
 getline(infile, city);
 getline(infile, college);
 getline(infile, wasteSpace);
 int Age = atoi(age.c_str());
 
 person tempPerson(name, password, gender, Age, city, college);
 dataRecord.insert(tempPerson);
 count++;
 }
     dataRecord.addToBst(tree);
 }
 
 void userMenu(string name, string password) {
 system("Color F9");

 bool options = true;
 person *temp;  person *other; person temporary; vector<person *> tempFriends;
 
 temporary.setName(name);
 temp = tree.search(temporary);
 if(temp == NULL ){
 cout << "Incorrect Username and Password" << endl;
 system("pause");
 return;
 }
 if(temp->getPwd() != password){
 cout << "Incorrect Username and Password" << endl;
 system("pause");
 return;
 }

 if(temp->getStatus() != false)
 {
 int status;
 cout << "Your account is not active" << endl;
 cout << "Please reactivate your account in order to access it" <<endl;
 cout << "Press [1] to Reactivate or [2] to Exit" <<endl;
 cin >> status;
 if (status == 1)
 temp->deactivateAccount(false);
 else
 return;
 }
 while(options == true) {
	 system("CLS");	
	 cout << endl;
	 cout << "*******************  "<< temp->getName() << " Profile" << " *******************************" << endl;
     cout << "* " <<  setw(37) << " Choose an option from below" << setw(34)  << "*" << endl;
					cout << "* " << setw(25) << "1. Add a friend" << setw(47) << " * " << endl;
					cout << "* " << setw(39) << "2. Write a new Status Message" << setw(33) << " * " << endl;
					cout << "* " << setw(27) << "3. Send a message" << setw(44) << "*" << endl;
					cout << "* " << setw(30) << "4. Show your friends" << setw(42) << " * " << endl;
					cout << "* " << setw(26) << "5. Show newsfeed" << setw(46) << " * " << endl;
					cout << "* " << setw(33) << "6. Show status messages" << setw(38) << "*" << endl;
					cout << "* " << setw(34) << "7. Show private messages" << setw(37) << " *" << endl;
					cout << "* " << setw(29) << "8. Account Settings" << setw(42)  << " *" << endl;
					cout << "* " << setw(19) << "9. Logout" << setw(52) << " *" << endl;
					cout << "* " << setw(33) << "[Choose Your Option] : ";
					int option;
     string friendName;
     string message;
     string pressKey;
     bool friendFound = false;
     string status = " ";
     cin >> option;
    cout << "*****************************************************************************" << endl;
	system("CLS");	
 switch(option) {
 case 1 : cout << "Which friend would you like to add" << endl;
 cin.ignore();
 getline(cin, friendName);
 temporary.setName(friendName);
 other = tree.search(temporary);
 if(other == NULL)
 { cout << "Person does not exist in the database" <<endl;
 break;
 } else {
 temp->addFriend(*other);
 friendFound = true;
 }
 break;

 case 2 : cout << "What's on your mind?" << endl;
 cin.ignore();
 getline(cin, status);
 cout << " " << endl;
 temp->setStatus(status);
 break;
 
 case 3 :

 cout << "Which friend would you like to send a message" << endl;
 cin.ignore();
 getline(cin, friendName);
 cout << "What message would you like to send : " << endl;
 getline(cin, message);
 temporary.setName(friendName);
 other = tree.search(temporary);
 if(other == NULL)
 { cout << "Person does not exist in the database"  << endl;
 break;
 }
 else
 temp->sendMessage(*other, message);
 break;
 case 4 :
 temp->printFriends();

 break;
 case 5 :
 tempFriends = temp->getFriends();
 for(int i = 0; i < tempFriends.size(); i++) {
 tempFriends[i]->printStatus();
 }
 break;
 case 6 :
 temp->printStatus();
 break;
 case 7 :
 temp->printMessages();
 break;
 case 8:
 userAdminMenu(*temp);
 break;
 case 9 :
 options = false;
 break;
 default:
 cout << "select the right option" << endl;
 
 }
 system("pause");
 
 }
 
 
 if(options == false){
 cout << "You've been logged out." << endl;
 return;
 }
 
 }
 
 void userAdminMenu(person &personName) {
 person temporary;
 person *other;
 bool options = true;
 while( options == true ) {
 int option;
 string temp;
 	system("CLS");	
 	 cout << endl;
     cout << "*****************************      Your Settings        *********************************" << endl;
     cout << "* " <<  setw(34) << " Choose an option from below" << setw(37)  << "*" << endl;
     cout << "* " << setw(25) << "1. Change Password" << setw(47) << " * " << endl;
     cout << "* " << setw(21) << "2. Change City" << setw(51) << " * " << endl;
     cout << "* " << setw(27) << "3. Change University" << setw(44) << "*" << endl;
     cout << "* " << setw(25) << "4. Delete a Friend" << setw(47) << " * " << endl;
     cout << "* " << setw(36) << "5. Change Relationship status" << setw(36) << " * " << endl;
     cout << "* " << setw(28) << "6. Deactivate Profile" << setw(43) << "*" << endl;
     cout << "* " << setw(30) << "7. Back to your Profile" << setw(41) << " *" << endl;
     cout << "* " << setw(30) << "[Choose Your Option] : ";
     cin >> option;
     cout << "*****************************************************************************************" << endl;
	  system("CLS");	
 switch(option) {
 case 1 :
 cout << "New Password : ";
 cin>>temp;
 personName.setPassword(temp);
 cout << "Your Password has been changed" << endl;
 break;
 case 2 ://IT DOENST WORK.. SEE WHATS WRONG
 cout << "New City : ";
         cin.ignore();

         getline(cin,temp);
         personName.setCity(temp);
 cout << "Your City has been changed" << endl;
 break;
 case 3 :
 cout << "New University : ";
         cin.ignore();
getline(cin,temp);
 personName.setCollege(temp);
 cout << "\nYour University has been changed" << endl;
 break;
 case 4:
 cout << "Enter the name of the friend you want to Delete : " << endl;
 cin.ignore();
 getline(cin, temp);
 temporary.setName(temp);
 other = tree.search(temporary);
 if(other == NULL)
 { cout << "The person does not exist in the database." << endl;
 break;
 }
 personName.deleteFriend(*other);
 break;
 case 5 :
 cout << "Who are you in relationship with (write name or type 'none') : " << endl;
 cin.ignore();
 getline(cin, temp);
 temporary.setName(temp);
 other = tree.search(temporary);
 
 if(temp != "none"){
 if(other == NULL)
 { cout << "The person does not exist in the database." << endl;
 break;
 }
 personName.setRelationship(other);}
 else
 
 personName.setRelationship(NULL);
 break;
 case 6 :
 cout << "Are you sure you want to deactivate your account?" <<endl
 <<"Choose [1] for Yes \n [2] for No  : ";
 cin >> temp;
 if (temp == "1"){
 personName.deactivateAccount(true);
 cout <<"Your account has been deactivated, however you can still access your account until you logout" << endl;
 }
 else {
 cout << "Your account has not been deactivated" << endl;
 }
 break;
 case 7:
 options = false;
 break;
 default:
 cout << "please select the right option" << endl;
 
 }
 system("pause");	
 }
 
 
 }
 
 
 void adminMenu(inputoutput &obj, string password) {
 if (password != "vno")
 {
 cout << "incorrect username or password";
 return;
 }
      system("Color 0A");
     hashing hashfunc(count);
     dataRecord.addtoHash(hashfunc);
     person temporary; string name;
      system("pause");	

 
 bool options = true;
 while(options == true) {
	  system("CLS");	
	 	 cout << endl;
     cout << "***************************** Administrator ****************************" << endl;
     cout << "*                                                                       *" << endl;
     cout << "* " <<  setw(40) << " Choose an option from below" << setw(31)  << "*" << endl;
     cout << "* " << setw(25) << "[1] Create a new Profle" << setw(47) << " * " << endl;
     cout << "* " << setw(21) << "[2] Delete a Person" << setw(51) << " * " << endl;
     cout << "* " << setw(28) << "[3] Search a person in BST" << setw(43) << "*" << endl;
     cout << "* " << setw(29) << "[4] Search a person in Hash" << setw(42) << "*" << endl;
     cout << "* " << setw(26) << "[5] Print the Hash Table" << setw(46) << " * " << endl;
     cout << "* " << setw(27) << "[6] Hash Usage Statistics" << setw(45)  << " * " << endl;
     cout << "* " << setw(25) << "[7] Print Indented Tree" << setw(46) << "*" << endl;
     cout << "* " << setw(27) << "[8] Print the Binary Tree" << setw(44)   << " *" << endl;
     cout << "* " << setw(19) << "[9] Write to File" << setw(52) << " *" << endl;
     cout << "* " << setw(13) << "[10] Logout" << setw(58) << " *" << endl;
     cout << "* " << setw(25) << "[Choose Your Option] : ";
     int option;
     cin >> option;
     cout << "**********************************************************************" << endl;
  system("CLS");
 switch(option) {
 case 1:
         temporary = getcaseone();
         dataRecord.insert(temporary);
         hashfunc.addObject(dataRecord.search(temporary));
         tree.insert(dataRecord.search(temporary));
 break;
 case 2:
 { cout << "Name of the person to be deleted : " <<endl;
 cin.ignore();
 getline(cin, name);
 temporary.setName(name);
 hashfunc.removeObject(temporary);
 tree.remove(temporary);
 dataRecord.deleteNode(temporary);
 break;
 }
     case 3 :{
         cout << "Name of the person to be searched in BST : " <<endl;
         cin.ignore();
         getline(cin, name);
         temporary.setName(name);
         person *temp = tree.search(temporary);
         if (temp == 0) { cout << "Person not found in the database" << endl; break;}
         temp->printPerson();

 break;
     }
     case 4 :
         cout << "Name of the person to be searched in Hash : " <<endl;
         cin.ignore();
         getline(cin, name);
         temporary.setName(name);
         temporary =  hashfunc.search(temporary);
         if (temporary.getCollege() == " ") cout << "Person not found in the database" << endl;
         else temporary.printPerson();
         
         break;

 case 5 :
 hashfunc.PrintTable();
 break;
 
 case 6 :
         hashfunc.statistics();

 break;
 
 case 7:
 tree.printIndent();
 break;
case 8 : tree.print_inOrder();
case 9 :{
             ofstream myfile ("names.txt");
             if (myfile.is_open())
             {
                 dataRecord.addToFile(myfile);
				 cout << "File Created" <<endl;
             }
             else cout << "Unable to open file" <<endl;
             
             
             break;
         }
 case 10:
 options = false;
 break;
 default :
 cout << "Please enter the correct choice:" <<endl;
 }
   system("pause");
 }
 if(options == false) {
 cout << "You have been logged out" <<endl;
 return;
 }
 }
     
     person getcaseone()
     {
         
         string name;
         string password;
         string gender;
         string age;
         string city;
         string college;
         
         cout << "Name : ";
         cin.ignore();
         getline(cin,name);
         cout << "Password : ";
         getline(cin,password);
         cout  << "Gender : ";
         getline(cin,gender);
         cout << "Age : ";
         getline(cin,age);
         cout  << "City : ";
         getline(cin,city);
         cout << "University : ";
         getline(cin,college);
         int Age = atoi(age.c_str());
         
         person tempPerson(name, password, gender, Age, city, college);
         return tempPerson;
     }
 };
 
