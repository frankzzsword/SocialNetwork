/*************************************************Binary Search Tree******************************************************/

#include <iostream>
#include "BinarySearchTree.h"
using namespace std;



template <class itemType>
typename BinarySearchTree<itemType>::node* BinarySearchTree<itemType>::_insert(node*& i, itemType &d){
    if(i == NULL)  // (1) If we are at the end of the tree place the value
    {
        node* n = new node;
        n->data = &d;
        n->left = n->right = NULL;
        i = n;
    }
    else if(d < *i->data){  //(2) otherwise go left if smaller
        _insert(i->left, d);
        if(Height(i->left) - Height(i->right) == 2){
            if(d < *i->left->data)
                rotateLeftOnce(i);
            else
                rotateLeftTwice(i);
        }
    }
    else if(d > *i->data){ // (3) otherwise go right if bigger
        _insert(i->right, d);
        if(Height(i->right) - Height(i->left) == 2){
            if(d > *i->right->data)
                rotateRightOnce(i);
            else
                rotateRightTwice(i);
        }
    }
    return i;
}


template <class itemType>
void BinarySearchTree<itemType>::insert(itemType &data){
 
    _insert(root, data);
}

//template <class itemType>
//void BinarySearchTree<itemType>::remove(itemType &data){
//    
//    _remove(root, data);
//   
//}
template <class itemType>
void BinarySearchTree<itemType>::remove(itemType &d)
{
    //Locate the element
    bool found = false;
    if(isEmpty())
    {
        cout<<" This Tree is empty! "<<endl;
        return;
    }
    node* curr;
    node* parent = nullptr;
    curr = root;
    while(curr != NULL)
    {
        if(*curr->data == d)
        {
            found = true;
            break;
        }
        else
        {
            parent = curr;
            if(d>*curr->data) curr = curr->right;
            else curr = curr->left;
        }
    }
    if(!found)
    {
	
        cout<<"Person not found in the Binary Search Tree"<<endl;
        return;
    }
    
    
    // 3 cases :
    // 1. We're removing a leaf node
    // 2. We're removing a node with a single child
    // 3. we're removing a node with 2 children
    
    // Node with single child
    if((curr->left == NULL && curr->right != NULL)|| (curr->left != NULL
                                                      && curr->right == NULL))
    {
        if(curr->left == NULL && curr->right != NULL)
        {
            if(parent->left == curr)
            {
                parent->left = curr->right;
                delete curr;
            }
            else
            {
                parent->right = curr->right;
                delete curr;
            }
        }
        else // left child present, no right child
        {
            if(parent->left == curr)
            {
                parent->left = curr->left;
                delete curr;
            }
            else
            {
                parent->right = curr->left;
                delete curr;
            }
        }
		system("Color F4");
        cout << "Person has been removed from Binary Search Tree" << endl;
        return;
    }
    
    //We're looking at a leaf node
    if( curr->left == NULL && curr->right == NULL)
    {
        if(parent->left == curr) parent->left = NULL;
        else parent->right = NULL;
        delete curr;
	
        cout << "Person has been removed from Binary Search Tree"  << endl;
        return;
    }
    
    
    //Node with 2 children
    // replace node with smallest value in right subtree
    if (curr->left != NULL && curr->right != NULL)
    {
        node* chkr;
        chkr = curr->right;
        if((chkr->left == NULL) && (chkr->right == NULL))
        {
            curr = chkr;
            delete chkr;
            curr->right = NULL;
        }
        else // right child has children
        {
            //if the node's right child has a left child
            // Move all the way down left to locate smallest element
            
            if((curr->right)->left != NULL)
            {
                node* lcurr;
                node* lcurrp;
                lcurrp = curr->right;
                lcurr = (curr->right)->left;
                while(lcurr->left != NULL)
                {
                    lcurrp = lcurr;
                    lcurr = lcurr->left;
                }
                *curr->data = *lcurr->data;
                delete lcurr;
                lcurrp->left = NULL;
            }
            else
            {
                node* tmp;
                tmp = curr->right;
                *curr->data = *tmp->data;
                curr->right = tmp->right;
                delete tmp;
            }
        }
	
        cout << "Person has been removed from Binary Search Tree"  << endl;

        return;
    }
    
}
template <class itemType> 
int BinarySearchTree<itemType>::getBalance(node* N){
    if (N == NULL)
        return 0;
    return Height(N->left) - Height(N->right);
}

//destroy BST
template <class itemType> 
void BinarySearchTree<itemType>::delete_BST(node *root){
    if(root!=NULL)
    {
        delete_BST(root->left);
        delete_BST(root->right);
        delete(root);
        if(root->left!=NULL)
            root->left=NULL;
        if(root->right!=NULL)
            root->right=NULL;
        root=NULL;
    }
}

template <class itemType>
void BinarySearchTree<itemType>::print_inOrder()
{
   
    cout << "*****************************PRINTING BINARY SEARCH TREE*****************" << endl;
    inOrder(root);
}

template <class itemType>
void BinarySearchTree<itemType>::inOrder(node* i)
{
    if(i != NULL)
    {

        if(i->left)
        {
            inOrder(i->left);
        }
        cout<< *i->data << endl;

        if(i->right)
        {
            inOrder(i->right);
        }

    }
    else return;
}

template <class itemType>
void BinarySearchTree<itemType>::printIndent()
{
   
    cout << "*****************************PRINTING BINARY SEARCH TREE*****************" << endl;
    indented( root, 0 );
}

template <class itemType>
void BinarySearchTree<itemType>::indented ( node* tp, int spaces )
{
    int i;
    if( tp != NULL )
    {
        indented( tp->right, spaces + 13 );
        for( i = 0; i < spaces; i++ )
            cout <<' ';
        person *ptr = tp->data;
        cout << ptr->getName() << endl;
        indented( tp->left, spaces + 13);
    }
}


//  Somewhere else in the program...:

template <class itemType>
itemType* BinarySearchTree<itemType>::_search(node* i ,itemType const &key) {
    
    
   	if(i == NULL) return NULL;
    
    if(*i->data == key) return i->data;
    else {
        if(*i->data < key)
            return _search(i->right, key) ;
        else
            return _search(i->left, key);
    }
    
}
template <class itemType>
itemType* BinarySearchTree<itemType>::search(itemType const &key) {
    return _search(root, key);
}


template <class itemType>
int BinarySearchTree<itemType>::Height(node* node){
    int  left , right;
    if(node==NULL){
        return false;
        }
    
    left = Height(node->left);
    right = Height(node->right);
    if(left > right)
        return left+1;
    else
        return right+1;
}

template <class itemType>
void BinarySearchTree<itemType>::rotateLeftOnce(node*& i){
    node *otherNode;
    otherNode = i->left;
    i->left = otherNode->right;
    otherNode->right = i;
    i = otherNode;
}

template <class itemType>
void BinarySearchTree<itemType>::rotateLeftTwice(node*& i){

    rotateRightOnce(i->left);
    rotateLeftOnce(i);
}

template <class itemType>
void BinarySearchTree<itemType>::rotateRightOnce(node*& i){
    node * otherNode;
    otherNode = i->right;
    i->right = otherNode->left;
    otherNode->left = i;
    i = otherNode;
}

template <class itemType>
void BinarySearchTree<itemType>::rotateRightTwice(node*& i){
    rotateLeftOnce(i->right);
    rotateRightOnce(i);
}

